version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ../..
      dockerfile: repRec-api/_docker/Dockerfile.frontend
    ports:
      - "4200:80"
    networks:
      - app-network

  # Backend Service
  backend:
    build:
      context: ../..
      dockerfile: repRec-api/_docker/Dockerfile.backend
    ports:
      - "5205:8080"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - API_LOG_LEVEL=${API_LOG_LEVEL}
      - API_AUTH_ISSUER=${API_AUTH_ISSUER}
      - API_AUTH_AUTHORITY=${API_AUTH_AUTHORITY}
      - API_AUTH_AUDIENCE1=${API_AUTH_AUDIENCE1}
      - API_AUTH_AUDIENCE2=${API_AUTH_AUDIENCE2}
      - 'DB_CONNECTION_DEV=${DB_CONNECTION_DEV}'
    networks:
      - app-network
    depends_on:
      - db

  # PostgreSQL Database Service
  db:
    image: postgres:17
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
